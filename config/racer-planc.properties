
# algorithm
analysis.name = racer-planc
analysis.algorithm.Racer.Plan_C = true
# use the modified CPAAlgorithm
analysis.RacerAlgorithm = true
# reachedSet 需要更改为RACER -> RacerReachedSet
analysis.reachedSet = RACER
analysis.traversal.order = dfs

# ####
analysis.functionPointerCalls = true
analysis.functionPointerTargets = USED_IN_CODE, EQ_PARAM_TYPES, EQ_PARAM_COUNT, RETURN_VALUE
analysis.matchAssignedFunctionPointers = true
analysis.matchAssignedFunctionPointers.ignoreUnknownAssignments = true
analysis.summaryEdges = true
analysis.threadOperationsTransform = false
analysis.traversal.useCallstack = true
# ####

# CPAs
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.racer.RacerUsageCPA
RacerUsageCPA.cpa = cpa.composite.CompositeCPA
# CompositeCPA.cpas = cpa.bdd.BDDCPA, cpa.racerThreading.RacerThreadingCPA, cpa.lockOld.LockCPA, cpa.functionpointer.FunctionPointerCPA
# CompositeCPA.cpas = cpa.bdd.BDDCPA, cpa.racerThreading.RacerThreadingCPA, cpa.lockOld.LockCPA, cpa.functionpointer.FunctionPointerCPA, cpa.datarace.DataRaceCPA
CompositeCPA.cpas = cpa.bdd.BDDCPA, cpa.racerThreading.RacerThreadingCPA, cpa.lockOld.LockCPA, cpa.functionpointer.FunctionPointerCPA, cpa.datarace.DataRaceCPA, cpa.por.pcdpor.PCDPORCPA

# LockCPA
cpa.lockOld.lockinfo = mutex_lock, spin_lock, rtnl_lock, console_sem, rwsem
cpa.lockOld.reduceLockCounters = BLOCK
cpa.lockOld.reduceUselessLocks = false
cpa.lockOld.refinement = false
cpa.lockOld.stopAfterLockLimit = true


# ####
cpa.arg.witness.removeInsufficientEdges = false
cpa.callstack.skipRecursion = true
cpa.lock.lockinfo = mutex_lock, spin_lock, rtnl_lock, console_sem, rwsem
cpa.lock.reduceLockCounters = BLOCK
cpa.lock.reduceUselessLocks = false
cpa.lock.refinement = false
cpa.lock.stopAfterLockLimit = true
# ####



# racer
cpa.racer.unsafedetector.ignoreEmptyLockset = false
cpa.racer.abortfunctions = __exit, pthread_exit, panic, ldv_check_final_state
cpa.racer.binderFunctions = INIT_LIST_HEAD, list_add, list_add_tail, list_del, list_replace, list_replace_init, list_del_init, list_move, list_move_tail, list_is_last, list_empty, ldv_list_get_first, ldv_list_is_stop, ldv_list_get_next, memcpy, virtqueue_add_buf, rcu_assign_pointer,copy_to_user,copy_from_user,kfree,list_add_tail_rcu
cpa.racer.export.witnessTemplate = witness.%s.graphml
cpa.racer.filterMissedFiles = false
cpa.racer.filterSimilarUnsafes = true
cpa.racer.outputType = KLEVER3
cpa.racer.precision = localsave
cpa.racer.printOnlyTrueUnsafes = true
cpa.racer.printUnsafesIfUnknown = true
cpa.racer.processCoveredUsages = false
cpa.racer.skippedfunctions = mfree_annotated
cpa.racer.skippedvariables.byFunction = entry_point, INIT_LIST_HEAD, __list_del, __list_add, list_add
cpa.racer.skippedvariables.byFunctionPrefix = ldv_initialize
cpa.racer.skippedvariables.byNamePrefix = ldv_, emg_, __ldv
cpa.racer.skippedvariables.byType = struct ath_tx_stats
cpa.racer.useSoundRegions = false

# PCDPOR
cpa.por.pcdpor.regardThreadCreationAsNormalEdge = false
# 构建约束依赖图
utils.edgeinfo.buildDepGraph  = true
# 为克隆函数构建节点
depgraph.cond.buildClonedFunc = true
# 使用约束依赖
depgraph.cond.useCondDep = true
depgraph.cond.removeIsolatedNodes = false
depgraph.cond.export = true
depgraph.cond.useSolverToCompute = true
depgraph.cond.exportDot = CondDependenceGraph.dot
cpa.locations.forConcurrent 		= true
cpa.locations.allowMultipleLHS 		= false
cpa.locations.maxNumberOfThreads	= 5
cpa.locations.useIncClonedFunc			= false
cpa.threading.useIncClonedFunc 			= false
depgraph.cond.buildForNoneCloneThread	= false
# cfa.cfaCloner.numberOfCopies			= 2


# result export
cpa.arg.export = true
cpa.arg.file = racer-planc.dot
cfa.callgraph.export = true
cfa.callgraph.file = racer-planc.dot
cfa.export = true
cfa.exportPerFunction = true
counterexample.export.report = Counterexample.racer-planc.%d.html
configuration.dumpFile = racer-planc.properties
report.export = true
precision.path = localsave
report.file = racer-planc.html



console_sem.lock = acquire_console_sem
console_sem.maxDepth = 2
console_sem.unlock = release_console_sem
copy_from_user.pInfo = WRITE:1, READ:1, READ:0
copy_to_user.pInfo = WRITE:1, READ:1, READ:0
counterexample.export.enabled = true
counterexample.export.exportWitness = true
coverage.enabled = true
coverage.file = racer-planc.info


# spec
specification = 


# 允许支持pthread_create函数
cpa.callstack.unsupportedFunctions = {"longjmp", "siglongjmp", "__builtin_va_arg"}
# cpa.threading.useClonedFunctions = true
cfa.useCFACloningForMultiThreadedPrograms = true


INIT_LIST_HEAD.pInfo = WRITE:1
kfree.pInfo = WRITE:1
ldv_list_get_first.linkInfo = 0, 1
ldv_list_get_first.pInfo = READ:1
ldv_list_get_next.linkInfo = 0, 1
ldv_list_get_next.pInfo = READ:1
ldv_list_is_stop.pInfo = READ:1, READ:1
list_add.linkInfo = 1, 2
list_add.pInfo = WRITE:1, WRITE:1
list_add_tail.linkInfo = 1, 2
list_add_tail.pInfo = WRITE:1, WRITE:1
list_add_tail_rcu.pInfo = READ:1, WRITE:1
list_del.pInfo = WRITE:1
list_del_init.pInfo = WRITE:1
list_empty.pInfo = READ:1
list_is_last.pInfo = READ:1, READ:1
list_move.linkInfo = 1, 2
list_move.pInfo = WRITE:1, WRITE:1
list_move_tail.linkInfo = 1, 2
list_move_tail.pInfo = WRITE:1, WRITE:1
list_replace.linkInfo = 2, 1
list_replace.pInfo = WRITE:1, WRITE:1
list_replace_init.linkInfo = 2, 1
list_replace_init.pInfo = WRITE:1, WRITE:1
log.level = INFO
memcpy.pInfo = WRITE:1, READ:1, READ:0
mutex_lock.ldv_mutex_model_lock.parameters = 2
mutex_lock.ldv_mutex_model_unlock.parameters = 2
mutex_lock.lock = ldv_mutex_model_lock, pthread_mutex_lock
mutex_lock.maxDepth = 2
mutex_lock.unlock = ldv_mutex_model_unlock, pthread_mutex_unlock
rcu_assign_pointer.pInfo = WRITE:0, READ:0
rtnl_lock.lock = rtnl_lock
rtnl_lock.maxDepth = 2
rtnl_lock.unlock = rtnl_unlock, __rtnl_unlock
rw_sem.ldv_spin_lock.parameters = 1
rw_sem.ldv_spin_unlock.parameters = 1
rw_sem.lock = down_write, down_read
rw_sem.maxDepth = 2
rw_sem.unlock = up_write, down_write
spin_lock.ldv_spin_lock.parameters = 1
spin_lock.ldv_spin_unlock.parameters = 1
spin_lock.lock = ldv_spin_model_lock
spin_lock.maxDepth = 2
spin_lock.unlock = ldv_spin_model_unlock
statistics.memory = true
virtqueue_add_buf.pInfo = WRITE:1, READ:1, READ:0, READ:0, READ:1, READ:0



