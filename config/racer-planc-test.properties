
# algorithm
analysis.name = racer-planc-test
analysis.algorithm.Racer.Plan_C = true
# use the modified CPAAlgorithm
analysis.RacerAlgorithm = true
# reachedSet 需要更改为RACER -> RacerReachedSet
analysis.reachedSet = RACER
analysis.traversal.order = dfs

# CPAs
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.racer.RacerUsageCPA
RacerUsageCPA.cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.bdd.BDDCPA, cpa.racerThreading.RacerThreadingCPA, cpa.lockOld.LockCPA, cpa.functionpointer.FunctionPointerCPA

# racer
cpa.racer.unsafedetector.ignoreEmptyLockset = false

# result export
cpa.arg.export = true
cpa.arg.file = racer-planc-test.dot

configuration.dumpFile = racer-planc-test.properties

report.export = true
precision.path = localsave
report.file = racer-planc-test.html


# LockCPA
cpa.lockOld.lockinfo = mutex_lock, spin_lock, rtnl_lock, console_sem, rwsem
cpa.lockOld.reduceLockCounters = BLOCK
cpa.lockOld.reduceUselessLocks = false
cpa.lockOld.refinement = false
cpa.lockOld.stopAfterLockLimit = true



# spec
specification = 


# 允许支持pthread_create函数
cpa.callstack.unsupportedFunctions = {"longjmp", "siglongjmp", "__builtin_va_arg"}
# cpa.threading.useClonedFunctions = true
cfa.useCFACloningForMultiThreadedPrograms = true